public class Task3 {
 int a[];
 int size;
 int front=0;
 int rear=0;
 int count;
 Task3(int size){
	 a= new int[size];
	 this.size=size;
	 rear=-1;
	 front=0;
	 count=0;
 }
 public boolean isEmpty() {
	 if(count==0) {
		 return true;
	 }
	return false;
 }
 public void enqueue(int data) {
	 if(isFull()) {
		 System.out.println("queue is full");
	 }
	 else {
		 rear = (rear + 1) % size;
	        a[rear] = data;
	        count++;}

	    }
	 
 public boolean isFull() {
     return count == size;
 }
 
 public void Dequeue() {
	 if (isEmpty()) {
         System.out.println("Queue is empty. Cannot dequeue.");
         return;
     }
     System.out.println("Dequeue: " + a[front]);
     front = (front + 1) % size;
     count--;
 }
 
 public int size() {
     return count;
 }
 public int peek() {
     if (isEmpty()) {
         System.out.println("Queue is empty. Cannot peek.");
         return -1; // Return a sentinel value to indicate an error
     }
     return a[front];
 }
 public static void main (String[] args)
 {
 // create a queue of capacity 5
 Task3 q = new Task3(5);
 q.enqueue(1);
 q.enqueue(2);
 q.enqueue(3);
 q.enqueue(4);
 System.out.println("Front element is: " + q.peek());
 q.Dequeue();
 System.out.println("Front element is: " + q.peek());
 System.out.println("Queue size is " + q.size());
 q.Dequeue();
 q.Dequeue();
 if (q.isEmpty())
 System.out.println("Queue Is Empty");
 else
 System.out.println("Queue Is Not Empty");
 }
 }